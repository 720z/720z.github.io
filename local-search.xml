<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS基础-数组和字符串相关方法</title>
    <link href="/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80-day06-%E6%95%B0%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/09/JavaScript%E5%9F%BA%E7%A1%80-day06-%E6%95%B0%E7%BB%84%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>总结了一些JS基础里，操作数据和字符串的常用方法。</p><p>其特性和书写方法需要加强记忆，反复练习。</p><h2 id="JS基础-数组的相关方法"><a href="#JS基础-数组的相关方法" class="headerlink" title="JS基础 - 数组的相关方法"></a>JS基础 - 数组的相关方法</h2><table><thead><tr><th align="left">方法名</th><th>作用</th><th>参数</th><th>返回值</th><th>修改原数组</th></tr></thead><tbody><tr><td align="left"><strong>★push(n1, n2)</strong></td><td>追加元素到数组末尾</td><td>要追加的元素</td><td>加过的数组长度</td><td>修改</td></tr><tr><td align="left"><strong>unshift(n1, n2)</strong></td><td>追加元素到数组开头</td><td>要追加的元素</td><td>加过的数组长度</td><td>修改</td></tr><tr><td align="left"><strong>Array.isArray()</strong></td><td>判断一个值是否是数组</td><td>值或变量</td><td>布尔值</td><td>–</td></tr><tr><td align="left"><strong>pop()</strong></td><td>从数组末尾删除一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td align="left"><strong>shift()</strong></td><td>从数组开头添加一个元素</td><td>无</td><td>删除的元素</td><td>修改</td></tr><tr><td align="left"><strong>sort(fn)</strong></td><td>对数组进行排序</td><td>函数</td><td>排序后的数组</td><td>修改</td></tr><tr><td align="left"><strong>reverse()</strong></td><td>对数组进行翻转</td><td>无</td><td>翻转后的数组</td><td>修改</td></tr><tr><td align="left"><strong>★indexOf(元素)</strong></td><td>查找元素在数组中第一次出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td align="left"><strong>lastIndexOf(元素)</strong></td><td>从后向前查找元素在数组中出现的索引</td><td>要查找的元素</td><td>索引值 ( - 1)</td><td>不会修改</td></tr><tr><td align="left"><strong>★join(连接符)</strong></td><td>把数组中元素连接并返回字符串</td><td>连接符</td><td>字符串</td><td>不会修改</td></tr><tr><td align="left"><strong>toString()</strong></td><td>把复杂数据类型转成字符串形式</td><td>无</td><td>字符串</td><td>不会修改</td></tr><tr><td align="left"><strong>★slice(m[, n])</strong></td><td>从m位置开始截取数组到n结束</td><td>索引值</td><td>新数组</td><td>不会修改</td></tr><tr><td align="left"><strong>★splice(m, n)</strong></td><td>从m位置开始删除数组, 删除n个</td><td>(索引, 个数)</td><td>删除元素的新数组</td><td>会修改</td></tr><tr><td align="left"><strong>concat(arr1, arr2)</strong></td><td>拼接两个或多个数组</td><td>要拼接的数组</td><td>拼接后的新数组</td><td>不会修改</td></tr></tbody></table><h2 id="JS-基础-字符串的相关方法"><a href="#JS-基础-字符串的相关方法" class="headerlink" title="JS 基础 - 字符串的相关方法"></a>JS 基础 - 字符串的相关方法</h2><table><thead><tr><th>方法名</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><strong>length</strong></td><td>获取字符串的长度</td><td>无</td><td>字符串的长度</td></tr><tr><td><strong>★str[i]</strong></td><td>获取指定索引位置的字符</td><td>无</td><td>单个字符</td></tr><tr><td><strong>charAt(i)</strong></td><td>获取指定索引位置的字符</td><td>索引</td><td>单个字符</td></tr><tr><td><strong>★indexOf(字符[, n])</strong></td><td>从位置 n 开始查找字符的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong>lastIndexOf(字符)</strong></td><td>从后向前查找字符出现的索引位置</td><td>字符</td><td>索引值 (-1)</td></tr><tr><td><strong>★slice(m[, n])</strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong>★substr(m[, n])</strong></td><td>从 m 位置开始截取字符串, 截取 n 位数</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong>substring(m[, n])</strong></td><td>从 m 位置开始截取字符串, 截止到 n 位置</td><td>索引</td><td>截取后的字符</td></tr><tr><td><strong>★split(分隔符)</strong></td><td>把字符串按照指定的分隔符分隔成数组</td><td>分隔符</td><td>新数组</td></tr><tr><td><strong>toUpperCase()</strong></td><td>把字符串中的小写字母转大写</td><td>无</td><td>转化后的字符串</td></tr><tr><td><strong>toLowerCase()</strong></td><td>把字符串中的大写字母转小写</td><td>无</td><td>转化后的字符串</td></tr></tbody></table><p><strong>备注:</strong><br>字符串中所有的方法都不会修改原本的字符串, 要想修改只能重新赋值;</p><p>重点记忆★的相关方法</p>]]></content>
    
    
    <categories>
      
      <category>JS笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级-正则表达式</title>
    <link href="/2021/02/09/Javascript%E9%AB%98%E7%BA%A7-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/02/09/Javascript%E9%AB%98%E7%BA%A7-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在<br>JavaScript中，正则表达式也是对象。<br>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户<br>名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，<br>正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要<br>的特定部分(提取)等 。<br>在其他语言也会使用正则表达式，因此有很学习的必要。</p><h2 id="JS高级-day04-正则表达式"><a href="#JS高级-day04-正则表达式" class="headerlink" title="JS高级 day04-正则表达式"></a>JS高级 day04-正则表达式</h2><h3 id="1-正则表达式概述"><a href="#1-正则表达式概述" class="headerlink" title="1.正则表达式概述"></a>1.正则表达式概述</h3><h4 id="1-1概念"><a href="#1-1概念" class="headerlink" title="1.1概念"></a>1.1概念</h4><p>正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式，在数据类型中是属于对象</p><h4 id="1-2作用及特点"><a href="#1-2作用及特点" class="headerlink" title="1.2作用及特点"></a>1.2作用及特点</h4><ul><li><p>作用：正则表达式通常用来校验、查找、替换指定规则的字符文本</p><ol><li><p>验证表单，如：只能输入英文、字母、数字和下划线</p><ol start="2"><li><p>过滤页面内容中的敏感词汇，或者对指定字符组合进行替换 </p></li><li><p>从字符串中提取我们想要的特定部分</p></li></ol></li></ol></li><li><p>特点：</p><ol><li><p>灵活性、逻辑性和功能性 （强大）</p></li><li><p>简单高效</p></li><li><p>可读性稍差，不便于记忆（一般复制相关的正则表达式，修改后即可使用）</p></li></ol></li></ul><h3 id="2-正则表达式使用"><a href="#2-正则表达式使用" class="headerlink" title="2.正则表达式使用"></a>2.正则表达式使用</h3><h4 id="2-1创建方式"><a href="#2-1创建方式" class="headerlink" title="2.1创建方式"></a>2.1创建方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">构造函数方式：<span class="hljs-keyword">var</span> regexp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/abc/</span>)<br><br>字面量方式：<span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/123/</span><br></code></pre></td></tr></table></figure><h4 id="2-2测试"><a href="#2-2测试" class="headerlink" title="2.2测试"></a>2.2测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;123&#x27;</span>))<span class="hljs-comment">//返回值是布尔值</span><br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-number">123456</span>)); <span class="hljs-comment">// false 不包含123</span><br></code></pre></td></tr></table></figure><h3 id="3-正则表达式中特殊字符"><a href="#3-正则表达式中特殊字符" class="headerlink" title="3.正则表达式中特殊字符"></a>3.正则表达式中特殊字符</h3><p>特殊字符非常多，可以参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><h4 id="3-1边界符（位置符）"><a href="#3-1边界符（位置符）" class="headerlink" title="3.1边界符（位置符）"></a>3.1边界符（位置符）</h4><p>主要用来匹配字符的开始和结束位置:</p><p>   (1) ^: 用来匹配以…开头</p><p>   (2) $: 用来匹配以…结尾</p><p>注意：</p><p>   (1) 不使用 ^ 和 $ 表示只要字符串中包含匹配的内容就返回 true, 可以多出其他任意字符</p><p>   (2) ^ 和 $ 在一起配合使用，表示是精确匹配, 不能多出其他字符也不能少 (必须满足数量和类型都一致)</p><h4 id="3-2字符类"><a href="#3-2字符类" class="headerlink" title="3.2字符类"></a>3.2字符类</h4><p>[xyz]  只要包含x,y,z中任意一个就满足条件</p><p>[^xyz] 字符串中只要有一个不在中括号内的字符就满足规则</p><p>[a-f] :a,b,c,d,e,f</p><p>(xyz): 表示一个整体</p><h4 id="3-3量词符"><a href="#3-3量词符" class="headerlink" title="3.3量词符"></a>3.3量词符</h4><p>*：表示前面的字符出现 0 次或多次, 即可有可无 ( &gt;= 0)</p><p>+：表示前面的字符至少出现 1 次或多次, 即至少出现一次 ( &gt;= 0)</p><p>？：表示前面的字符出现 0 次或 1 次, 要么不出现, 要么只出现 1 次 ( 0 || 1)</p><p>{3}  {3,}  {3,6}：分别表示重复3次；3次及以上；3次到6次</p><h4 id="3-4预定义类"><a href="#3-4预定义类" class="headerlink" title="3.4预定义类"></a>3.4预定义类</h4><p>\d：匹配 0~9 之间的任意一个数字，等价于 [0-9]</p><p>\D: 匹配所有 0~9 之外的字符，非数字，等价于 [ ^0-9]</p><p>\w: 匹配任意的字母、数字和下划线，等价于 [a-zA-Z0-9_]</p><p>\W: 匹配任意的字母、数字和下划线之外的字符，等价于 [ ^0-9a-zA-Z_]</p><p>\s: 匹配所有的空格（包括换行符，制表符，空格符等），等价于 [\t\r\n\v\f]</p><p>\S：匹配所有的非空格符，等价于 [ ^\t\r\n\v\f]</p><p>记忆：所有大写字符表示 “非”, 上述预定义类只表示单个字符</p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h3><p>4.1 <a href="https://c.runoob.com/front-end/854">菜鸟工具</a></p><p>4.2 正则表达式查找和替换（replace，match）</p><p>replace(reg, 替换后的字符) 可以替换字符串中的字符，参数可以是普通字符串，也可以是正则表达式</p><p>指定匹配的模式：</p><p>   （1）/正则表达式/g    全局匹配</p><p>   （2）/正则表达式/i     忽略大小写进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abC123abC678abc345c&#x27;</span><br><span class="hljs-comment">// 把所有的 c 替换成 a</span><br>str = str.replace(<span class="hljs-regexp">/c/gi</span>, <span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">//正则加了g可以全局替换 否则只能替换第一个</span><br><br><span class="hljs-comment">// match 方法可以配合正则表达式, 从字符串中找出所有匹配正则的字符</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;3&#125;/g</span><br><span class="hljs-keyword">var</span> res = str.match(reg)<br><span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//返回数组</span><br><br><span class="hljs-comment">// 替换敏感词 (傻叉)</span><br><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>)<br>ipt.addEventListener(<span class="hljs-string">&#x27;blur&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.value.replace(<span class="hljs-regexp">/傻\s*叉|s\s*x/gi</span>, <span class="hljs-string">&#x27;**&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h3><p>表单验证</p>]]></content>
    
    
    <categories>
      
      <category>JS笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>搭建博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
